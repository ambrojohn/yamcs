// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from archive.proto

package org.yamcs.protobuf;


public final class SchemaArchive
{

    public static final class ColumnData
    {
        public static final org.yamcs.protobuf.SchemaArchive.ColumnData.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaArchive.ColumnData.MessageSchema();
        public static final org.yamcs.protobuf.SchemaArchive.ColumnData.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaArchive.ColumnData.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.ColumnData>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.ColumnData message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                if(message.hasValue())
                    output.writeObject(2, message.getValue(), org.yamcs.protobuf.SchemaYamcs.Value.WRITE, false);

            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.ColumnData message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.ColumnData.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.ColumnData.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.ColumnData> typeClass()
            {
                return org.yamcs.protobuf.Archive.ColumnData.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.ColumnData.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.ColumnData.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.ColumnData message) throws java.io.IOException {}
            public org.yamcs.protobuf.Archive.ColumnData newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.ColumnData.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.ColumnData.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.setValue(input.mergeObject(org.yamcs.protobuf.Yamcs.Value.newBuilder(), org.yamcs.protobuf.SchemaYamcs.Value.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.ColumnData.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Archive.ColumnData.Builder newMessage()
            {
                return org.yamcs.protobuf.Archive.ColumnData.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.ColumnData.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.ColumnData.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.ColumnData.Builder> typeClass()
            {
                return org.yamcs.protobuf.Archive.ColumnData.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.ColumnData.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.ColumnData.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.ColumnData.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "value";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("value", 2);
        }
    }

    public static final class StreamData
    {
        public static final org.yamcs.protobuf.SchemaArchive.StreamData.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaArchive.StreamData.MessageSchema();
        public static final org.yamcs.protobuf.SchemaArchive.StreamData.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaArchive.StreamData.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.StreamData>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.StreamData message) throws java.io.IOException
            {
                if(message.hasStream())
                    output.writeString(1, message.getStream(), false);
                for(org.yamcs.protobuf.Archive.ColumnData column : message.getColumnList())
                    output.writeObject(2, column, org.yamcs.protobuf.SchemaArchive.ColumnData.WRITE, true);

            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.StreamData message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.StreamData.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.StreamData.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.StreamData> typeClass()
            {
                return org.yamcs.protobuf.Archive.StreamData.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.StreamData.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.StreamData.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.StreamData message) throws java.io.IOException {}
            public org.yamcs.protobuf.Archive.StreamData newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.StreamData.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.StreamData.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setStream(input.readString());
                            break;
                        case 2:
                            builder.addColumn(input.mergeObject(org.yamcs.protobuf.Archive.ColumnData.newBuilder(), org.yamcs.protobuf.SchemaArchive.ColumnData.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.StreamData.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Archive.StreamData.Builder newMessage()
            {
                return org.yamcs.protobuf.Archive.StreamData.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.StreamData.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.StreamData.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.StreamData.Builder> typeClass()
            {
                return org.yamcs.protobuf.Archive.StreamData.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.StreamData.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.StreamData.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.StreamData.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "stream";
                case 2: return "column";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("stream", 1);
            fieldMap.put("column", 2);
        }
    }

    public static final class TableData
    {

        public static final class TableRecord
        {
            public static final org.yamcs.protobuf.SchemaArchive.TableData.TableRecord.MessageSchema WRITE =
                new org.yamcs.protobuf.SchemaArchive.TableData.TableRecord.MessageSchema();
            public static final org.yamcs.protobuf.SchemaArchive.TableData.TableRecord.BuilderSchema MERGE =
                new org.yamcs.protobuf.SchemaArchive.TableData.TableRecord.BuilderSchema();
            
            public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.TableData.TableRecord>
            {
                public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.TableData.TableRecord message) throws java.io.IOException
                {
                    for(org.yamcs.protobuf.Archive.ColumnData column : message.getColumnList())
                        output.writeObject(1, column, org.yamcs.protobuf.SchemaArchive.ColumnData.WRITE, true);

                }
                public boolean isInitialized(org.yamcs.protobuf.Archive.TableData.TableRecord message)
                {
                    return message.isInitialized();
                }
                public java.lang.String getFieldName(int number)
                {
                    return org.yamcs.protobuf.SchemaArchive.TableData.TableRecord.getFieldName(number);
                }
                public int getFieldNumber(java.lang.String name)
                {
                    return org.yamcs.protobuf.SchemaArchive.TableData.TableRecord.getFieldNumber(name);
                }
                public java.lang.Class<org.yamcs.protobuf.Archive.TableData.TableRecord> typeClass()
                {
                    return org.yamcs.protobuf.Archive.TableData.TableRecord.class;
                }
                public java.lang.String messageName()
                {
                    return org.yamcs.protobuf.Archive.TableData.TableRecord.class.getSimpleName();
                }
                public java.lang.String messageFullName()
                {
                    return org.yamcs.protobuf.Archive.TableData.TableRecord.class.getName();
                }
                //unused
                public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.TableData.TableRecord message) throws java.io.IOException {}
                public org.yamcs.protobuf.Archive.TableData.TableRecord newMessage() { return null; }
            }
            public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.TableData.TableRecord.Builder>
            {
                public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.TableData.TableRecord.Builder builder) throws java.io.IOException
                {
                    for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                    {
                        switch(number)
                        {
                            case 0:
                                return;
                            case 1:
                                builder.addColumn(input.mergeObject(org.yamcs.protobuf.Archive.ColumnData.newBuilder(), org.yamcs.protobuf.SchemaArchive.ColumnData.MERGE));

                                break;
                            default:
                                input.handleUnknownField(number, this);
                        }
                    }
                }
                public boolean isInitialized(org.yamcs.protobuf.Archive.TableData.TableRecord.Builder builder)
                {
                    return builder.isInitialized();
                }
                public org.yamcs.protobuf.Archive.TableData.TableRecord.Builder newMessage()
                {
                    return org.yamcs.protobuf.Archive.TableData.TableRecord.newBuilder();
                }
                public java.lang.String getFieldName(int number)
                {
                    return org.yamcs.protobuf.SchemaArchive.TableData.TableRecord.getFieldName(number);
                }
                public int getFieldNumber(java.lang.String name)
                {
                    return org.yamcs.protobuf.SchemaArchive.TableData.TableRecord.getFieldNumber(name);
                }
                public java.lang.Class<org.yamcs.protobuf.Archive.TableData.TableRecord.Builder> typeClass()
                {
                    return org.yamcs.protobuf.Archive.TableData.TableRecord.Builder.class;
                }
                public java.lang.String messageName()
                {
                    return org.yamcs.protobuf.Archive.TableData.TableRecord.class.getSimpleName();
                }
                public java.lang.String messageFullName()
                {
                    return org.yamcs.protobuf.Archive.TableData.TableRecord.class.getName();
                }
                //unused
                public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.TableData.TableRecord.Builder builder) throws java.io.IOException {}
            }
            public static java.lang.String getFieldName(int number)
            {
                switch(number)
                {
                    case 1: return "column";
                    default: return null;
                }
            }
            public static int getFieldNumber(java.lang.String name)
            {
                java.lang.Integer number = fieldMap.get(name);
                return number == null ? 0 : number.intValue();
            }
            private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
            static
            {
                fieldMap.put("column", 1);
            }
        }

        public static final org.yamcs.protobuf.SchemaArchive.TableData.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaArchive.TableData.MessageSchema();
        public static final org.yamcs.protobuf.SchemaArchive.TableData.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaArchive.TableData.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.TableData>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.TableData message) throws java.io.IOException
            {
                for(org.yamcs.protobuf.Archive.TableData.TableRecord record : message.getRecordList())
                    output.writeObject(1, record, org.yamcs.protobuf.SchemaArchive.TableData.TableRecord.WRITE, true);

            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.TableData message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.TableData.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.TableData.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.TableData> typeClass()
            {
                return org.yamcs.protobuf.Archive.TableData.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.TableData.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.TableData.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.TableData message) throws java.io.IOException {}
            public org.yamcs.protobuf.Archive.TableData newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.TableData.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.TableData.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.addRecord(input.mergeObject(org.yamcs.protobuf.Archive.TableData.TableRecord.newBuilder(), org.yamcs.protobuf.SchemaArchive.TableData.TableRecord.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.TableData.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Archive.TableData.Builder newMessage()
            {
                return org.yamcs.protobuf.Archive.TableData.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.TableData.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.TableData.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.TableData.Builder> typeClass()
            {
                return org.yamcs.protobuf.Archive.TableData.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.TableData.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.TableData.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.TableData.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "record";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("record", 1);
        }
    }

    public static final class ColumnInfo
    {
        public static final org.yamcs.protobuf.SchemaArchive.ColumnInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaArchive.ColumnInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaArchive.ColumnInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaArchive.ColumnInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.ColumnInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.ColumnInfo message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                if(message.hasType())
                    output.writeString(2, message.getType(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.ColumnInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.ColumnInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.ColumnInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.ColumnInfo> typeClass()
            {
                return org.yamcs.protobuf.Archive.ColumnInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.ColumnInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.ColumnInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.ColumnInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Archive.ColumnInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.ColumnInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.ColumnInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.setType(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.ColumnInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Archive.ColumnInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Archive.ColumnInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.ColumnInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.ColumnInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.ColumnInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Archive.ColumnInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.ColumnInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.ColumnInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.ColumnInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "type";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("type", 2);
        }
    }

    public static final class TableInfo
    {
        public static final org.yamcs.protobuf.SchemaArchive.TableInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaArchive.TableInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaArchive.TableInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaArchive.TableInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.TableInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.TableInfo message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                for(org.yamcs.protobuf.Archive.ColumnInfo keyColumn : message.getKeyColumnList())
                    output.writeObject(2, keyColumn, org.yamcs.protobuf.SchemaArchive.ColumnInfo.WRITE, true);

                for(org.yamcs.protobuf.Archive.ColumnInfo valueColumn : message.getValueColumnList())
                    output.writeObject(3, valueColumn, org.yamcs.protobuf.SchemaArchive.ColumnInfo.WRITE, true);

            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.TableInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.TableInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.TableInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.TableInfo> typeClass()
            {
                return org.yamcs.protobuf.Archive.TableInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.TableInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.TableInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.TableInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Archive.TableInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.TableInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.TableInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.addKeyColumn(input.mergeObject(org.yamcs.protobuf.Archive.ColumnInfo.newBuilder(), org.yamcs.protobuf.SchemaArchive.ColumnInfo.MERGE));

                            break;
                        case 3:
                            builder.addValueColumn(input.mergeObject(org.yamcs.protobuf.Archive.ColumnInfo.newBuilder(), org.yamcs.protobuf.SchemaArchive.ColumnInfo.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.TableInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Archive.TableInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Archive.TableInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.TableInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.TableInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.TableInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Archive.TableInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.TableInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.TableInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.TableInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "keyColumn";
                case 3: return "valueColumn";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("keyColumn", 2);
            fieldMap.put("valueColumn", 3);
        }
    }

    public static final class StreamInfo
    {
        public static final org.yamcs.protobuf.SchemaArchive.StreamInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaArchive.StreamInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaArchive.StreamInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaArchive.StreamInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.StreamInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.StreamInfo message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                for(org.yamcs.protobuf.Archive.ColumnInfo column : message.getColumnList())
                    output.writeObject(2, column, org.yamcs.protobuf.SchemaArchive.ColumnInfo.WRITE, true);

            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.StreamInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.StreamInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.StreamInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.StreamInfo> typeClass()
            {
                return org.yamcs.protobuf.Archive.StreamInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.StreamInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.StreamInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.StreamInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Archive.StreamInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Archive.StreamInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Archive.StreamInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.addColumn(input.mergeObject(org.yamcs.protobuf.Archive.ColumnInfo.newBuilder(), org.yamcs.protobuf.SchemaArchive.ColumnInfo.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Archive.StreamInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Archive.StreamInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Archive.StreamInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaArchive.StreamInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaArchive.StreamInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Archive.StreamInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Archive.StreamInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Archive.StreamInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Archive.StreamInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Archive.StreamInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "column";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("column", 2);
        }
    }

}
